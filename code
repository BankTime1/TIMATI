/**
 *Submitted for verification at BscScan.com on 2025-01-16
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;


interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint8);
    function symbol() external view returns (string memory);
    function name() external view returns (string memory);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


contract TIMATI is IBEP20 {
    string private _name = "TIMATI";
    string private _symbol = "TIMATI";
    uint8 private _decimals = 18;
    uint256 private _totalSupply = 1_000_000_000_000 * 10 ** uint256(_decimals);


    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;


    uint256 public liquidityFee = 2;
    uint256 public marketingFee = 3;
    address public liquidityWallet;
    address public marketingWallet;


    // Убедитесь, что кошелек указан здесь
    constructor() {
        liquidityWallet = 0xF17bC6E3a47288A7Ad6b203435547A7b70Ae0cFF;
        marketingWallet = 0xF17bC6E3a47288A7Ad6b203435547A7b70Ae0cFF;


        // Инициализация общего объема и назначение владельцу
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }


    // Информация о токене
    function name() external view override returns (string memory) {
        return _name;
    }


    function symbol() external view override returns (string memory) {
        return _symbol;
    }


    function decimals() external view override returns (uint8) {
        return _decimals;
    }


    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }


    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }


    // Переводы
    function transfer(address recipient, uint256 amount) external override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }


    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }


    function approve(address spender, uint256 amount) external override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }


    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }


    // Внутренние функции
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Transfer from zero address");
        require(recipient != address(0), "Transfer to zero address");
        require(_balances[sender] >= amount, "Insufficient balance");


        uint256 fee = (amount * (liquidityFee + marketingFee)) / 100;
        uint256 amountAfterFee = amount - fee;


        _balances[sender] -= amount;
        _balances[recipient] += amountAfterFee;
        _balances[liquidityWallet] += (amount * liquidityFee) / 100;
        _balances[marketingWallet] += (amount * marketingFee) / 100;


        emit Transfer(sender, recipient, amountAfterFee);
        emit Transfer(sender, liquidityWallet, (amount * liquidityFee) / 100);
        emit Transfer(sender, marketingWallet, (amount * marketingFee) / 100);
    }


    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "Approve from zero address");
        require(spender != address(0), "Approve to zero address");


        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}
